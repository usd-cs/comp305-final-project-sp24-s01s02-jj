@startuml
!pragma layout smetana
'https://plantuml.com/class-diagram

enum DegreeType {
BACHELOR
MASTERS
DOCTORAL
-int id
+DegreeType(int id)
+int getId()
+{static}DegreeType fromId(int id)
}
DegreeType *-- Alumni

enum Grade {
FRESHMAN
SOPHOMORE
JUNIOR
SENIOR
GRADUATE
DOCTORAL
-int id
+Grade(int id)
+int getId()
+{static}Grade fromId(int id)
}
Grade *-- Student

interface DatabaseItem {
+DatabaseTable getParentTable()
+List<String> getStringList()
}

interface DatabaseTable {
    +{static}int PAGE_SIZE
    +String getTableName()
    +long getCountTableRows()
    +List<String> getColumnNames()
}

interface Webform {
}

class Alumni extends Person {
    -Date graduationDate
    -DegreeType degreeType

    +Alumni(long id)
    +Alumni(String firstName, String lastName, Date birthdate, String phoneNumber, String username, String organizationEmail, String secondaryEmail, boolean isActive, Department department, Date graduationDate, DegreeType degreeType)
    +Date getGraduationDate()
    +DegreeType getDegree()
}

class Building implements DatabaseItem {
    -long id
    -String name
    -String address
    -int floors
    -String abbreviation

    +Building(long id)
    +Building(String name, String address, int floors, String abbreviation)
    +long getId()
    +String getName()
    +String getAddress()
    +int getFloors()
    +String getAbbreviation()
}

class Department implements DatabaseItem {
    -long id
    -String name

    +Department(long id)
    +Department(String name)
    +long getId()
    +String getName()
}
Department *-- Person

class Employee extends Person {
    -Optional<Employee> manager
    -Date startDate
    -double hourlyWage

    +Employee(long id)
    +Employee(String firstName, String lastName, Date birthdate, String phoneNumber, String username, String organizationEmail, String secondaryEmail, boolean isActive, Department department, Date startDate, double hourlyWage, Employee manager)
    +Optional<Employee> getManager()
    +Date getStartDate()
    +double getHourlyWage()
}

class Faculty extends Employee {
    -Room officeLocation;
    -boolean hasTenure;

    +Faculty(long id)
    +Faculty(String firstName, String lastName, Date birthdate, String phoneNumber, String username, String organizationEmail, String secondaryEmail, boolean isActive, Department department, Date startDate, double hourlyWage, Employee manager, Room officeLocation, boolean hasTenure)
    +Room getOfficeLocation()
    +boolean hasTenure()
}

class Person implements DatabaseItem {
    - long id
    - String firstName
    - String lastName
    - Date birthdate
    - String phoneNumber
    - String username
    - String organizationEmail
    - String secondaryEmail
    - boolean isActive
    - Department department

    +Person(long id)
    +Person(String firstName, String lastName, Date birthdate, String phoneNumber, String username, String organizationEmail, String secondaryEmail, boolean isActive, Department department)
    +long getId()
    +String getFirstName()
    +String getLastName()
    +Date getBirthdate()
    +String getPhoneNumber()
    +String getUsername()
    +String getOrganizationEmail()
    +String getSecondaryEmail()
    +boolean isActive()
    +Department getDepartment()
}
Person *-- Database

class Room implements DatabaseItem {
     -long id;
     -Building building;
     -int roomNumber;

     +Room(long id)
     +Room(Building building, int roomNumber)
     +long getId()
     +Building getBuilding()
     +int getRoomNumber()
}
Room *-- Faculty
Room *-- Building

class Student extends Person {
    -String major;
    -Grade grade;

    +Student(long id)
    +Student(String firstName, String lastName, Date birthdate, String phoneNumber, String username, String organizationEmail, String secondaryEmail, boolean isActive, Department department, String major, Grade grade)
    +String getMajor()
    +Grade getGrade()
}

class Config {
    -{static} Config instance
    -String databaseName
    -String databaseUsername
    -String databasePassword
    -String databaseHost

    ~Config()
    -Config(String filename)
    ~{static}InputStream readFromResourceFile(String filename)
    ~{static}Properties getPropertiesFromInputStream(InputStream inputStream)
    ~void setInstanceVariables(Properties properties)
    +{static}Config getInstance()
    +{static}Config initialize(String filename)
    +String getDatabaseName()
    +String getDatabaseUsername()
    +String getDatabasePassword()
    +String getDatabaseHost()
    ~void reset()
}
Config *-- Config
Config *-- Database

class Database {
 -{static} int NETWORK_TIMEOUT
 -{static} Database instance
 -Connection databaseConnection

 -Database()
 +{static} Database getInstance()
 -void initializeDatabase()
 -boolean testHostConnection(String host)
 +Connection getDatabaseConnection()
 ~void reset()
}
Database *-- Database


class SchoolSimApplication {
  -{static} String CONFIG_FILE

  +{static} void main(String[] args)
}
SchoolSimApplication o-- Config

abstract class AbstractTable implements DatabaseTable {
    #List<DatabaseItem> getPagedResultSet(int pageNumber, Function<? super Long, ? extends DatabaseItem> idConstructor)
    #{static} void deleteWithId(long id, String tableName)
    +{abstract} void deleteFromDatabase(long id)
}

class AlumniTable extends AbstractTable {
    +List<Alumni> getAllWithDegreeType(DegreeType degreeType)
    +List<Alumni> getAllWithGraduationDate(String graduationDate)
}
Alumni *-- AlumniTable
DegreeType o-- AlumniTable

class EmployeeTable extends AbstractTable {
    +List<Employee> getAllWithStartDate(String startDate)
    +List<Employee> getAllWithHourlyWage(String hourlyWage)
    +List<Employee> getAllWithMangerID(String managerID)
}
Employee *-- EmployeeTable

class FacultyTable extends AbstractTable {
    +List<Faculty> getAllByOfficeLocation(String officeLocation)
    +List<Faculty> getAllWithTenure()
    +List<Faculty> getAllWithNoTenure()
}
Faculty *-- FacultyTable

class PersonTable extends AbstractTable {
    +List<Person> getAllWithFirstName(String firstName)
    +List<Person> getAllWithLastName(String lastName)
    +List<Person> getAllWithPhoneNumber(String phoneNumber)
    +Optional<Person> getByUsername(String username)
    +Optional<Person> getByOrganizationEmail(String organizationEmail)
    +Optional<Person> getBySecondaryEmail(String secondaryEmail)
    +List<Person> getActivePeople()
    +List<Person> getInactivePeople()
    +List<DatabaseItem> getAllPaged(int pageNumber)
}
Person *-- PersonTable

class StudentTable extends AbstractTable {
    +List<Student> getAllWithMajor(String major)
    +List<Student> getAllInGrade(Grade grade)
}
Grade o-- StudentTable
Student *-- StudentTable

class DashboardController {
    +String renderDashboard(Model model)
}

class OrganizationFormController {
    +void addViewControllers(ViewControllerRegistry registry)
    ~DatabaseTable getTableFromKey(Optional<String> key)
    +String form(@RequestParam Optional<String> type, Model model)
}

class PersonFormController {
}

class PlacesFormController {
}

class AlumniForm implements Webform {
}
Alumni *-- AlumniForm

class PersonForm implements Webform {
}
Person *-- PersonForm

class TableVisualizer {
}

@enduml